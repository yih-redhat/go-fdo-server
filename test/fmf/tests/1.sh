set -euox pipefail
./integration.sh

# Get OS info
source /etc/os-release

source /etc/os-release
# Setup variables
TEST_UUID=qcow2-$((1 + RANDOM % 1000000))
#TEMPDIR=$(mktemp -d)
GUEST_ADDRESS=192.168.100.50
SSH_OPTIONS=(-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5)
SSH_KEY=key/ostree_key
SSH_KEY_PUB=$(cat "${SSH_KEY}".pub)
SSH_USER=admin
SSH_PASSWORD=

case "${ID}-${VERSION_ID}" in
    "centos-10")
        OS_VARIANT="centos-stream9"
        BASE_IMAGE_URL="quay.io/centos-bootc/centos-bootc:stream10"
        BIB_URL="quay.io/centos-bootc/bootc-image-builder:latest"
        BOOT_ARGS="uefi,firmware.feature0.name=secure-boot,firmware.feature0.enabled=no"
        ;;
    *)
        echo "unsupported distro: ${ID}-${VERSION_ID}"
        exit 1;;
esac


FROM quay.io/fedora/fedora-bootc:43
RUN cat > /etc/yum.repos.d/fedora-iot.repo << 'EOF'
[copr:copr.fedorainfracloud.org:group_fedora-iot:fedora-iot]
name=Copr repo for fedora-iot owned by @fedora-iot
baseurl=https://download.copr.fedorainfracloud.org/results/@fedora-iot/fedora-iot/fedora-$releasever-$basearch/
type=rpm-md
skip_if_unavailable=True
gpgcheck=1
gpgkey=https://download.copr.fedorainfracloud.org/results/@fedora-iot/fedora-iot/pubkey.gpg
repo_gpgcheck=0
enabled=1
enabled_metadata=1
EOF
RUN dnf install -y go-fdo-client

podman build  --retry=5 --retry-delay=10s -t fdo-bootc:1234 -f Containerfile .

mkdir -pv output
SSH_OPTIONS=(-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5)
SSH_KEY=key/ostree_key
# Create config.toml with kickstart information
tee config.toml > /dev/null << STOPHERE
[customizations.installer.kickstart]
contents = """
text
lang en_US.UTF-8
keyboard us
timezone --utc Etc/UTC
selinux --enforcing
rootpw --plaintext root
user --name=${SSH_USER} --groups=wheel --iscrypted --password=${SSH_PASSWORD}
sshkey --username=${SSH_USER} "ssh-rsa ${SSH_KEY} ostree-image-test"
bootloader --timeout=1 --append="net.ifnames=0 modprobe.blacklist=vc4"
network --bootproto=dhcp --device=link --activate --onboot=on
zerombr
clearpart --all --initlabel --disklabel=msdos
autopart --nohome --noswap --type=plain
poweroff
%post --log=/var/log/anaconda/post-install.log --erroronfail
# export MANUFACTURING_SERVER_URL="http://127.0.0.1:8038"
# export DIUN_PUB_KEY_INSECURE="true"
go-fdo-client --blob "${device_credentials}" --debug device-init "${manufacturer_url}" --device-info=gotest --key ec256
/usr/libexec/fdo/fdo-manufacturing-client
# no sudo password for SSH user
echo -e 'admin\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers
# Remove any persistent NIC rules generated by udev
rm -vf /etc/udev/rules.d/*persistent-net*.rules
# And ensure that we will do DHCP on eth0 on startup
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
PERSISTENT_DHCLIENT="yes"
EOF
echo "Packages within this iot or edge image:"
echo "-----------------------------------------------------------------------"
rpm -qa | sort
echo "-----------------------------------------------------------------------"
# Note that running rpm recreates the rpm db files which aren't needed/wanted
rm -f /var/lib/rpm/__db*
echo "Zeroing out empty space."
# This forces the filesystem to reclaim space from deleted files
dd bs=1M if=/dev/zero of=/var/tmp/zeros || :
rm -f /var/tmp/zeros
echo "(Don't worry -- that out-of-space error was expected.)"
%end
"""
STOPHERE

# Generate disk image using bib
sudo podman run \
    --rm \
    -it \
    --privileged \
    --pull=newer \
    --security-opt label=type:unconfined_t \
    -v $(pwd)/config.toml:/config.toml:ro \
    -v $(pwd)/output:/output \
    -v /var/lib/containers/storage:/var/lib/containers/storage \
    quay.io/centos-bootc/bootc-image-builder:latest \
    --type iso \
    --local \
    --config /config.toml \
   fdo-bootc:1234

mv $(pwd)/output/qcow2/disk.qcow2 /var/lib/libvirt/images/${TEST_UUID}-disk.qcow2
LIBVIRT_IMAGE_PATH_UEFI=/var/lib/libvirt/images/${TEST_UUID}-disk.qcow2
sudo restorecon -Rv /var/lib/libvirt/images/

sudo virt-install  --name="${TEST_UUID}-uefi"\
                   --disk path="${LIBVIRT_IMAGE_PATH_UEFI}",format=qcow2 \
                   --ram 3072 \
                   --vcpus 2 \
                   --network network=integration,mac=34:49:22:B0:83:30 \
                   --os-type linux \
                   --os-variant ${OS_VARIANT} \
                   --boot ${BOOT_ARGS} \
                   --nographics \
                   --noautoconsole \
                   --wait=-1 \
                   --import \
                   --noreboot
